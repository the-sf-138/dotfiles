#+TITLE: Emacs Config
#+AUTHOR: sf
#+PROPERTY: header-args:emacs-lisp :tangle "config.el"  :padline no :tangle-mode (identity #o755)
#+OPTIONS: author:t date:t email:t H:3 num:nil toc:t ^:{}

* package
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

    (setq package-enable-at-startup t)
    (package-initialize)

                                            ; yolo
    (setq package-check-signature nil)

    (require 'use-package)
  #+END_SRC

* intra buffer navigation
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :config (evil-mode)

      (setq evil-emacs-state-modes  nil)
      (setq evil-insert-state-modes nil)
      (setq evil-normal-state-modes nil))

    (defvar colemak-mode (load-file "~/.emacs.d/colemak-mode.el"))

    (use-package general
      :ensure t
      :config
      (evil-define-key 'normal 'global "s" (general-key-dispatch 'evil-delete
                                             "q" (general-simulate-key ('evil-delete "u\""))
                                             "e" (general-simulate-key ('evil-delete "u("))
                                             "v" (general-simulate-key ('evil-delete "u["))
                                             "n" (general-simulate-key ('evil-delete "u<"))
                                             "s" 'evil-delete-whole-line))
      (evil-define-key 'normal 'global "c" (general-key-dispatch 'evil-change
                                             "q" (general-simulate-key ('evil-change "u\""))
                                             "e" (general-simulate-key ('evil-change "u("))
                                             "v" (general-simulate-key ('evil-change "u["))
                                             "n" (general-simulate-key ('evil-change "u<"))
                                             "s" 'cd-to-buffer-dir
                                             "c" 'evil-change-whole-line))
      (evil-define-key 'normal 'global "j" (general-key-dispatch 'evil-yank
                                             "q" (general-simulate-key ('evil-yank "u\""))
                                             "e" (general-simulate-key ('evil-yank "u("))
                                             "v" (general-simulate-key ('evil-yank "u["))
                                             "n" (general-simulate-key ('evil-yank "u<"))
                                             "j" 'evil-yank-whole-line)))

    (use-package ace-jump-mode
      :ensure t
      :config (evil-define-key '(normal) 'global (kbd "SPC n") 'ace-jump-mode))


    (use-package evil-collection
      :ensure t)

    (use-package origami
      :ensure t)

  #+END_SRC
  
* buffer visuals
  #+BEGIN_SRC emacs-lisp
    (use-package linum-relative
      :ensure t
      :config
      (setq linum-relative-backend 'display-line-numbers-mode))

    (use-package doom-modeline
      :ensure t
      :init
      (doom-modeline-mode 1)
      (setq doom-modeline-icon t))

    (use-package ansi-color
      :ensure t)

    (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    (set-face-attribute 'comint-highlight-prompt nil
                        :inherit nil)


    (set-frame-parameter (selected-frame) 'alpha '(85 85))
    (add-to-list 'default-frame-alist '(alpha 85 85))

    (evil-define-key 'motion 'global (kbd "C-+") 'text-scale-increase)
    (evil-define-key 'motion 'global (kbd "C--") 'text-scale-decrease)


    (global-hl-line-mode)


    (menu-bar-mode -1)
    (tool-bar-mode -1)

    (use-package rainbow-delimiters
      :ensure t)

    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :config (call-interactively color-theme-sanityinc-tommorow-night))
  #+END_SRC

* compilation-mode
  #+BEGIN_SRC emacs-lisp

    (setq compilation-skip-threshold 1)
    (setq compilation-scroll-output t)

    (evil-define-key 'normal 'global (kbd "SPC c SPC") 'recompile)

    (defun colorize-compilation-buffer()
      (toggle-read-only)
      (ansi-color-apply-on-region compilation-filter-start (point))
      (toggle-read-only))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  #+END_SRC

* undo-tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :config 
      (global-undo-tree-mode)
      (define-key evil-normal-state-map "\C-r" nil)
      (evil-define-key 'normal 'global "\C-r" 'undo-tree-redo)
      (evil-define-key 'normal 'global "\M-r" 'undo-tree-visualize))
  #+END_SRC

* shell
  #+BEGIN_SRC emacs-lisp
    (setq shell-file-name "zsh")
    (setq shell-command-switch "-ic")
    (setenv "PAGER" "cat")


    (use-package vterm
      :ensure t
      :config (use-package multi-vterm
                :ensure t)
      (add-hook 'vterm-mode-hook (lambda()
                                   (message "Setting up vterm mode")
                                   (evil-collection-vterm-setup)
                                   (evil-define-key '(insert normal) 'local (kbd "C-c C-n") 'evil-collection-vterm-toggle-send-escape)
                                   (evil-define-key '(insert normal) 'local (kbd "C-c C-c") 'vterm-send-C-c))))

    (defun tshell()
      (interactive)
      (setq new-shell-name (read-from-minibuffer "shell buffer name: " nil nil nil nil "*shell*"))
      (multi-vterm)
      (rename-buffer new-shell-name))
    (evil-define-key 'normal 'global (kbd "SPC tm") 'tshell)
  #+END_SRC

* indentation
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-always-indent t)
    (setq-default tab-width 4)
    (setq indent-tabs-mode nil)
    (evil-define-key 'insert 'global (kbd "TAB") 'tab-to-tab-stop)
  #+END_SRC

* evil-snipe
  #+BEGIN_SRC emacs-lisp
    (use-package evil-snipe
      :ensure t
      :config (evil-snipe-override-mode)
      (turn-off-evil-snipe-mode)
      (setq evil-snipe-scope 'whole-visible)
      (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))
  #+END_SRC

* org-mode
  #+BEGIN_SRC emacs-lisp
        (use-package org-bullets
          :ensure t
          :init (add-hook 'org-mode-hook (lambda ()
                                           (linum-relative-mode)
                                           (rainbow-delimiters-mode)
                                           (evil-define-key 'normal 'global (kbd "SPC p") 'org-preview-latex-fragment)
                                           (org-bullets-mode 1))))


        (defface org-block-begin-line
          '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
          "face used for begin")
        (defface org-block-background
          '((t (:background "#FFFFEA")))
          "face used for background")
        (defface org-block-end-line
          '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
          "face used for end")
        (require 'org)
        (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
        (setq org-pretty-entities t)
        (setq org-return-follows-link t)
        (setq org-src-fontify-natively t)
        (setq org-todo-keywords
              '((sequence "TODO" "WRITEUP" "|" "DONE")))

        (plist-put org-format-latex-options :scale 2)

        (org-babel-do-load-languages
         'org-babel-load-languages '((R . t) (python . t)
                                     (ein . t)))
        (setq org-confirm-babel-evaluate nil)
        (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  #+END_SRC

* switch-window
  #+BEGIN_SRC emacs-lisp
    (use-package switch-window
      :ensure t
      :bind (
             ("C-x o" . switch-window))
      :config
      (setq-default switch-window-shortcut-style 'qwerty)
      (setq-default switch-window-qwerty-shortcuts '("a" "s" "d" "f" "j" "k" "l" "w" "e" "i" "o"))
      (setq-default switch-window-minibuffer-shortcut ?z))
  #+END_SRC

* projectile
  #+BEGIN_SRC emacs-lisp
        (use-package projectile
          :ensure t)
    (evil-define-key '(normal) 'global (kbd "SPC ag") 'projectile-ag)
  #+END_SRC

* gdb
  #+BEGIN_SRC emacs-lisp
    (setq-default gdb-display-io-nopopup t) ; prevent annoying io buffer
  #+END_SRC

* ein
  #+BEGIN_SRC emacs-lisp
    (use-package ein
      :ensure t)
  #+END_SRC

* c++-mode
  #+BEGIN_SRC emacs-lisp
    (defun toggle-header-filename(filename)
      (if (equal "C" (file-name-extension filename))
          (concat (file-name-sans-extension filename) ".H")
        (concat (file-name-sans-extension filename) ".C")))
    (defun is-cpp-ext(filename)
      (let ((ext (file-name-extension filename)))
        (or (equal ext "H") (equal ext "C"))))
    (defun toggle-header()
      (interactive)
      (let ((curr-file (buffer-file-name (current-buffer))))
        (if (is-cpp-ext curr-file)
            (find-file (toggle-header-filename curr-file)))))
    (evil-define-key '(normal) 'c++-mode-map (kbd "SPC hh") 'toggle-header)

    (defun init-c++-mode()
      (linum-relative-mode)
      (modify-syntax-entry ?_ "w" c++-mode-syntax-table)
      (setq-local company-backends '(company-capf company-yasnippet company-dabbrev))
      (setq c-basic-offset tab-width))
    (add-hook 'c++-mode-hook 'init-c++-mode)

    (add-to-list 'auto-mode-alist '("\\.inc$" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.I$" . c++-mode))


    (use-package clang-format
      :ensure t)
    (evil-define-key 'normal 'global (kbd "SPC ff") 'clang-format-buffer)

    (defun clang-format-region-at-point()
      (interactive)
      (let ((bounds (bounds-of-thing-at-point 'paragraph)))
        (clang-format-region (car bounds) (cdr bounds))))
    (evil-define-key 'normal 'global (kbd "SPC fr") 'clang-format-region-at-point)

  #+END_SRC

* nxml-mode
  #+BEGIN_SRC emacs-lisp
    (defun init-nxml-mode()
      (modify-syntax-entry ?_ "w" nxml-mode-syntax-table)
      (modify-syntax-entry ?' "'" nxml-mode-syntax-table))
    (add-hook 'nxml-mode-hook 'init-nxml-mode)
  #+END_SRC

* helm
  #+BEGIN_SRC emacs-lisp

    (use-package helm
      :ensure t
      :config (helm-mode))
    (define-key evil-normal-state-map (kbd "C-x C-f") 'helm-find-files)
    (define-key evil-normal-state-map (kbd "SPC df") 'helm-find-files)
    (define-key evil-normal-state-map (kbd "SPC k") 'helm-resume)
    (global-set-key (kbd "M-x") 'helm-M-x)


    (use-package helm-swoop
      :ensure t
      :config
      (evil-define-key 'motion 'global (kbd "/") 'helm-swoop-without-pre-input)
      (evil-define-key 'motion 'global (kbd "?") 'helm-swoop-from-isearch)
      (evil-define-key 'motion 'global (kbd "SPC") nil)
      (evil-define-key 'motion 'global (kbd "SPC /") 'evil-search-forward))
  #+END_SRC

* elpy
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config (elpy-enable)
      (setenv "IPY_TEST_SIMPLE_PROMPT" nil)
      (setq python-shell-interpreter "ipython3"
            python-shell-interpreter-args "-i --simple-prompt"
            python-shell-prompt-detect-failure-warning nil)
      (add-to-list 'python-shell-completion-native-disabled-interpreters
                   "jupyter")
      (add-hook 'inferior-python-mode-hook 'ansi-color-for-comint-mode-on))

  #+END_SRC

* yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config (yas-global-mode 1))

    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC

* completion
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config (global-company-mode)
      (setq company-idle-delay 0.0))


    (use-package lsp-mode
      :ensure t
      :config
      (setq lsp-clients-clangd-executable "/usr/bin/clangd"))
    (require 'lsp-mode)

    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-doc-position 'top)
      (setq lsp-ui-doc-alignment 'window))
  #+END_SRC

* git
  #+BEGIN_SRC emacs-lisp

    (use-package magit
      :ensure t)

    (use-package evil-magit
      :ensure t
      :config
      (evil-magit-define-key 'normal 'magit-mode-map "n" 'evil-next-visual-line)
      (evil-magit-define-key 'normal 'magit-mode-map "e" 'evil-previous-visual-line)
      (evil-magit-define-key 'normal 'magit-mode-map "dd" 'evil-goto-first-line)
      (evil-magit-define-key 'normal 'magit-mode-map "D" 'evil--line))
  #+END_SRC

* javascript
  #+BEGIN_SRC emacs-lisp
    (use-package tide
      :ensure t)
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1))

    (add-hook 'js-mode-hook 'setup-tide-mode)
  #+END_SRC

* haskell
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-haskell
      :ensure t
      :config (setq lsp-haskell-server-path "/home/the_sf/.local/bin/haskell-language-server"))

    (defun setup-haskell-mode ()
      (lsp)
      (linum-relative-mode)
      (rainbow-delimiters-mode))

    (add-hook 'haskell-mode-hook 'setup-haskell-mode)
  #+END_SRC

* matlab
  #+BEGIN_SRC emacs-lisp
    (use-package matlab-mode
      :ensure t
      :config (setq matlab-shell-command "/usr/local/MATLAB/R2020b/bin/matlab"))
  #+END_SRC

* emacs-lisp-mode
#+BEGIN_SRC emacs-lisp
  (defun emacs-lisp-init-stuff()
    (interactive)
    (linum-relative-mode)
    (rainbow-delimiters-mode))
  (add-hook 'emacs-lisp-mode-hook 'emacs-lisp-init-stuff)
#+END_SRC
* coq
#+BEGIN_SRC emacs-lisp
  (defun coq-mode-init-stuff()
  (setq-local evil-insert-state-exit-hook (delete 'expand-abbrev evil-insert-state-exit-hook)))
  (add-hook 'coq-mode-hook 'coq-mode-init-stuff)
#+END_SRC
